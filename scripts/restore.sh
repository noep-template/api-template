#!/bin/bash

# Script de restauration unifi√© Fast Foodie
# Restaure la base de donn√©es et/ou les images

set -e

# Configuration
BACKUP_DIR="${BACKUP_DIR:-./backups}"
DB_BACKUP_DIR="${BACKUP_DIR}"
IMAGES_BACKUP_DIR="${BACKUP_DIR}/images"
CONTAINER_NAME="api-template"

# Fonction de logging
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Fonction d'aide
show_help() {
    echo "üîÑ Script de restauration unifi√© Fast Foodie"
    echo ""
    echo "Usage: $0 <fichier_sauvegarde> [options]"
    echo ""
    echo "Arguments:"
    echo "  fichier_sauvegarde    Nom du fichier de sauvegarde"
    echo "                        - *.sql pour la base de donn√©es"
    echo "                        - *.tar.gz pour les images"
    echo ""
    echo "Options:"
    echo "  -h, --help     Afficher cette aide"
    echo "  -f, --force    Forcer la restauration sans confirmation"
    echo "  -v, --verbose  Mode verbeux"
    echo ""
    echo "Exemples:"
    echo "  $0 fast_foodie_backup_20241201_020000.sql"
    echo "  $0 images_backup_20241201_020000.tar.gz"
    echo "  $0 fast_foodie_backup_20241201_020000.sql --force"
    echo "  $0 images_backup_20241201_020000.tar.gz --verbose"
}

# Variables
FORCE=false
VERBOSE=false

# Traiter les arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -*)
            echo "‚ùå Option inconnue: $1"
            show_help
            exit 1
            ;;
        *)
            BACKUP_FILE="$1"
            shift
            ;;
    esac
done

# V√©rifier qu'un fichier de sauvegarde a √©t√© sp√©cifi√©
if [ -z "$BACKUP_FILE" ]; then
    echo "‚ùå Erreur: Veuillez sp√©cifier un fichier de sauvegarde"
    echo ""
    echo "üìã Sauvegardes disponibles:"
    echo ""
    echo "üóÑÔ∏è  Base de donn√©es:"
    ls -la "${DB_BACKUP_DIR}"/*.sql 2>/dev/null || echo "   Aucune sauvegarde DB trouv√©e"
    echo ""
    echo "üñºÔ∏è  Images:"
    ls -la "${IMAGES_BACKUP_DIR}"/images_backup_*.tar.gz 2>/dev/null || echo "   Aucune sauvegarde d'images trouv√©e"
    echo ""
    show_help
    exit 1
fi

# D√©terminer le type de sauvegarde et le chemin
if [[ "$BACKUP_FILE" == *.sql ]]; then
    BACKUP_TYPE="Base de donn√©es"
    BACKUP_PATH="${DB_BACKUP_DIR}/${BACKUP_FILE}"
    RESTORE_FUNCTION="restore_db"
elif [[ "$BACKUP_FILE" == *.tar.gz ]]; then
    BACKUP_TYPE="Images"
    BACKUP_PATH="${IMAGES_BACKUP_DIR}/${BACKUP_FILE}"
    RESTORE_FUNCTION="restore_images"
else
    # Essayer les deux chemins
    if [ -f "${DB_BACKUP_DIR}/${BACKUP_FILE}" ]; then
        BACKUP_TYPE="Base de donn√©es"
        BACKUP_PATH="${DB_BACKUP_DIR}/${BACKUP_FILE}"
        RESTORE_FUNCTION="restore_db"
    elif [ -f "${IMAGES_BACKUP_DIR}/${BACKUP_FILE}" ]; then
        BACKUP_TYPE="Images"
        BACKUP_PATH="${IMAGES_BACKUP_DIR}/${BACKUP_FILE}"
        RESTORE_FUNCTION="restore_images"
    else
        echo "‚ùå Erreur: Le fichier de sauvegarde '${BACKUP_FILE}' n'existe pas"
        echo ""
        echo "üìã Sauvegardes disponibles:"
        echo ""
        echo "üóÑÔ∏è  Base de donn√©es:"
        ls -la "${DB_BACKUP_DIR}"/*.sql 2>/dev/null || echo "   Aucune sauvegarde DB trouv√©e"
        echo ""
        echo "üñºÔ∏è  Images:"
        ls -la "${IMAGES_BACKUP_DIR}"/images_backup_*.tar.gz 2>/dev/null || echo "   Aucune sauvegarde d'images trouv√©e"
        exit 1
    fi
fi

log "üîÑ D√©but de la restauration: ${BACKUP_TYPE}"
log "üìÑ Fichier de sauvegarde: ${BACKUP_FILE}"

# Demander confirmation sauf si --force
if [ "$FORCE" = false ]; then
    echo ""
    echo "‚ö†Ô∏è  ATTENTION: Cette op√©ration va √©craser les donn√©es actuelles!"
    echo "üìã Type: ${BACKUP_TYPE}"
    echo "üìÑ Fichier: ${BACKUP_FILE}"
    echo ""
    read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "‚ùå Restauration annul√©e par l'utilisateur"
        exit 1
    fi
fi

# Fonction de restauration de la base de donn√©es
restore_db() {
    log "üóÑÔ∏è  Restauration de la base de donn√©es..."
    
    # Variables d'environnement pour la DB
    DB_HOST=${TYPEORM_HOST:-"api-template-db"}
    DB_PORT=${TYPEORM_PORT:-"5432"}
    DB_NAME=${TYPEORM_DATABASE:-"fast_foodie_db"}
    DB_USER=${TYPEORM_USERNAME:-"postgres"}
    DB_PASSWORD=${TYPEORM_PASSWORD:-""}
    
    # V√©rifier que le conteneur DB est en cours d'ex√©cution
    if ! docker ps | grep -q "api-template-db"; then
        log "‚ùå Le conteneur api-template-db n'est pas en cours d'ex√©cution"
        exit 1
    fi
    
    # Cr√©er une sauvegarde de s√©curit√© avant restauration
    log "üõ°Ô∏è  Cr√©ation d'une sauvegarde de s√©curit√©..."
    SAFETY_BACKUP="${DB_BACKUP_DIR}/safety_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    docker exec -e PGPASSWORD="${DB_PASSWORD}" api-template-db pg_dump \
        -U "${DB_USER}" \
        -d "${DB_NAME}" \
        --verbose \
        --clean \
        --if-exists \
        --create \
        --no-owner \
        --no-privileges \
        --format=plain \
        > "${SAFETY_BACKUP}"
    
    log "‚úÖ Sauvegarde de s√©curit√© cr√©√©e: $(basename "${SAFETY_BACKUP}")"
    
    # Effectuer la restauration
    log "üîÑ Restauration de la base de donn√©es..."
    
    if docker exec -i api-template-db psql \
        -U "${DB_USER}" \
        -d "postgres" \
        < "${BACKUP_PATH}"; then
        
        log "‚úÖ Restauration de la base de donn√©es termin√©e avec succ√®s!"
        log "üìä Base de donn√©es '${DB_NAME}' restaur√©e depuis '${BACKUP_FILE}'"
    else
        log "‚ùå Erreur lors de la restauration de la base de donn√©es"
        log "üí° Vous pouvez restaurer la sauvegarde de s√©curit√©: $(basename "${SAFETY_BACKUP}")"
        exit 1
    fi
}

# Fonction de restauration des images
restore_images() {
    log "üñºÔ∏è  Restauration des images..."
    
    # V√©rifier que le conteneur API est en cours d'ex√©cution
    if ! docker ps | grep -q "${CONTAINER_NAME}"; then
        log "‚ùå Le conteneur ${CONTAINER_NAME} n'est pas en cours d'ex√©cution"
        exit 1
    fi
    
    # Cr√©er une sauvegarde de s√©curit√© avant restauration
    SAFETY_BACKUP="images_safety_$(date '+%Y%m%d_%H%M%S').tar.gz"
    SAFETY_PATH="${IMAGES_BACKUP_DIR}/${SAFETY_BACKUP}"
    
    if docker exec "${CONTAINER_NAME}" test -d "/app/public/files" && [ "$(docker exec "${CONTAINER_NAME}" ls -A "/app/public/files" 2>/dev/null)" ]; then
        log "üõ°Ô∏è  Cr√©ation d'une sauvegarde de s√©curit√©: ${SAFETY_BACKUP}"
        
        if [ "$VERBOSE" = true ]; then
            docker exec "${CONTAINER_NAME}" tar -czf - -C "/app/public/files" . > "$SAFETY_PATH"
        else
            docker exec "${CONTAINER_NAME}" tar -czf - -C "/app/public/files" . > "$SAFETY_PATH" 2>/dev/null
        fi
        
        log "‚úÖ Sauvegarde de s√©curit√© cr√©√©e: ${SAFETY_BACKUP}"
    fi
    
    # Sauvegarder les images actuelles si elles existent
    if docker exec "${CONTAINER_NAME}" test -d "/app/public/files" && [ "$(docker exec "${CONTAINER_NAME}" ls -A "/app/public/files" 2>/dev/null)" ]; then
        log "üì¶ Sauvegarde des images actuelles..."
        CURRENT_BACKUP="images_current_$(date '+%Y%m%d_%H%M%S').tar.gz"
        CURRENT_PATH="${IMAGES_BACKUP_DIR}/${CURRENT_BACKUP}"
        
        if [ "$VERBOSE" = true ]; then
            docker exec "${CONTAINER_NAME}" tar -czf - -C "/app/public/files" . > "$CURRENT_PATH"
        else
            docker exec "${CONTAINER_NAME}" tar -czf - -C "/app/public/files" . > "$CURRENT_PATH" 2>/dev/null
        fi
        
        log "‚úÖ Images actuelles sauvegard√©es: ${CURRENT_BACKUP}"
    fi
    
    # Vider le r√©pertoire de destination
    log "üßπ Nettoyage du r√©pertoire de destination..."
    docker exec "${CONTAINER_NAME}" rm -rf "/app/public/files"/*
    docker exec "${CONTAINER_NAME}" mkdir -p "/app/public/files"
    
    # Restaurer les images
    log "üîÑ Restauration des images depuis: ${BACKUP_FILE}"
    
    if [ "$VERBOSE" = true ]; then
        cat "$BACKUP_PATH" | docker exec -i "${CONTAINER_NAME}" tar -xzf - -C "/app/public/files"
    else
        cat "$BACKUP_PATH" | docker exec -i "${CONTAINER_NAME}" tar -xzf - -C "/app/public/files" >/dev/null 2>&1
    fi
    
    # V√©rifier que la restauration a r√©ussi
    RESTORED_COUNT=$(docker exec "${CONTAINER_NAME}" find "/app/public/files" -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.webp" \) | wc -l)
    
    if [ "$RESTORED_COUNT" -eq 0 ]; then
        log "‚ö†Ô∏è  Aucune image restaur√©e. V√©rifiez le contenu de la sauvegarde."
    else
        log "‚úÖ Restauration termin√©e: ${RESTORED_COUNT} image(s) restaur√©e(s)"
    fi
    
    # Afficher les informations finales
    log "üìä Informations finales:"
    BACKUP_SIZE=$(du -h "$BACKUP_PATH" | cut -f1)
    log "   üì¶ Taille de la sauvegarde: ${BACKUP_SIZE}"
    log "   üìÅ R√©pertoire de destination: /app/public/files"
    log "   üñºÔ∏è  Images restaur√©es: ${RESTORED_COUNT}"
    
    log "üéâ Restauration des images termin√©e avec succ√®s!"
    log "üí° Sauvegarde de s√©curit√© conserv√©e: ${SAFETY_BACKUP}"
}

# Ex√©cuter la fonction de restauration appropri√©e
$RESTORE_FUNCTION 