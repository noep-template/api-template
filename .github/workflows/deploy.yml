name: CI/CD Template API

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      GHCR_REGISTRY: ghcr.io
      OWNER: ${{ github.repository_owner }}
      SHA: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase owner
        run: echo "OWNER_LC=${OWNER,,}" >> $GITHUB_ENV
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Set short SHA
        run: echo "SHORT_SHA=${SHA::8}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build & push image with short SHA tag
        run: |
          docker build -t $GHCR_REGISTRY/${OWNER_LC}/template-api:${SHORT_SHA} .
          docker push $GHCR_REGISTRY/${OWNER_LC}/template-api:${SHORT_SHA}

      - name: Inject image tag into docker-compose.api.yml
        run: |
          sed -i "s|\${GHCR_REGISTRY}|${{ env.GHCR_REGISTRY }}|g" docker-compose.api.yml
          sed -i "s|\${OWNER_LC}|${{ env.OWNER_LC }}|g" docker-compose.api.yml
          sed -i "s|\${SHA}|${{ env.SHORT_SHA }}|g" docker-compose.api.yml

      - name: Upload deploy files
        uses: actions/upload-artifact@v4
        with:
          name: deploy-files
          path: |
            docker-compose.api.yml
            scripts/
            .env

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download deploy files
        uses: actions/download-artifact@v4
        with:
          name: deploy-files

      - name: Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p ~/template-api
            mkdir -p ~/template-api/backups

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: 'docker-compose.api.yml,scripts/,.env'
          target: '~/template-api/'
          strip_components: 0

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          envs: CR_PAT,GITHUB_USERNAME
          script: |
            cd ~/template-api
            export CR_PAT="${{ secrets.CR_PAT }}"
            export GITHUB_USERNAME="${{ github.actor }}"

            # Rendre tous les scripts exécutables
            chmod +x scripts/*.sh

            # Déployer l'application
            ./scripts/deploy.sh

            # Reconfigurer les sauvegardes automatiques
            echo "⏰ Reconfiguration des sauvegardes automatiques..."
            ./scripts/setup-backup-cron.sh daily 02:00
